#!/usr/bin/env python

import tarfile 
import tempfile
import StringIO
import os, os.path
import subprocess
import sys
import signal

def roundTo(numToRound, multiple):
  return ((numToRound + multiple - 1) // multiple) * multiple

# read exactly as many bytes as there are in a tar file, so we don't have to
# rely on EOF which is not always sent with Docker. Tar files are described
# here: https://en.wikipedia.org/wiki/Tar_(computing)
def readTar(stream):
  empty = '\0'*512
  res = ""
  while True:
    header = stream.read(512)
    res += header
    if header == empty:
      return res + stream.read(512)
    size = int(header[124:124+11], base=8)
    res += stream.read(roundTo(size, 512))

def bagpipe(args):
  configDir = "/setup"
  configTar = StringIO.StringIO(readTar(sys.stdin))
  tarfile.open(fileobj=configTar, mode='r').extractall(configDir)
  root    = os.environ['BAGPIPE']
  bagpipe = ["racket", os.path.join(root,"src/bagpipe/racket/main/bagpipe.rkt")]
  subprocess.call(bagpipe + ["verify", configDir] + args)

def sshd():
  subprocess.call(["service", "ssh", "start"])

if __name__ == '__main__':
  if len(sys.argv) >= 2 and sys.argv[1] == "verify":
    sshd()
    bagpipe(sys.argv[2:])
  elif len(sys.argv) == 2 and sys.argv[1] == "slave":
    sshd()
    signal.pause()
  else:
    print("""
Usage: bagpipe COMMAND

The bagpipe commands are:

   verify ARGS   Verifies the SETUP which is passed as a mount point called
                `setup`, or passed as a tar file via standard input. The SETUP 
                 must contain a file called `setup.rkt`. `setup.rkt` must define 
                 two variables called `as` and `policy`; the former defines the 
                 AS that bagpipe verifies using the POLICY defined by the 
                 latter. ARGS is passed to both the AS and POLICY.

   slave         Allow another bagpipe instance to use this machine.

   help          Display this help message and exit. For additional help visit:
                 http://konne.me/bagpipe
""")
